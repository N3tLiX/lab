name: "Terraform Apply [tf_apply.yml]"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed]

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs: 
  azurerm:
    name: "Backend"
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v1
      - name: "create [azurerm]"
        shell: "/bin/bash {0}"
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID
          source ${{github.workspace}}/variables.sh
          source ${{github.workspace}}/scripts/azurerm.sh
        id: azurerm
        env:
          TF_STATE_BLOB_SUBSCRIPTION_NAME: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: "validate [azurerm]"
        shell: "/bin/bash {0}"
        run: |
          echo "SAS_TOKEN        : [$SAS_TOKEN]"
          echo "GITHUB_JOB       : [$GITHUB_JOB]"
          echo "GITHUB_ACTION    : [$GITHUB_ACTION]"
          echo "GITHUB_RUN_ID    : [$GITHUB_RUN_ID]"
          echo "GITHUB_ACTOR     : [$GITHUB_ACTOR]"
          echo "GITHUB_ENV       : [${{github.env}}]"
          echo "GITHUB_WORKSPACE : [${{github.workspace}}]"
          echo "TF_WORKSPACE     : [${{ job.environment.name }}]"
        env:
          SAS_TOKEN: ${{ steps.azurerm.outputs.SasToken }}

  tf_plan:
    name: "Terraform [plan]"
    # if: github.event.pull_request.merged
    needs: [azurerm]
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v1
      - name: "Set environment variables and get the SAS Token"
        shell: "/bin/bash {0}"
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID
          source ${{github.workspace}}/variables.sh
          echo "::set-output name=sas_token::$(az storage account generate-sas \
            --permissions cdlruwap \
            --account-name $TF_STATE_BLOB_ACCOUNT_NAME \
            --services b \
            --resource-types sco \
            --expiry `date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'` \
            --only-show-errors -o tsv)"
          echo "::set-output name=resource_group::$TF_STATE_BLOB_ACCOUNT_RESOURCE_GROUP"
          echo "::set-output name=storage_account_name::$TF_STATE_BLOB_ACCOUNT_NAME"
          echo "::set-output name=container_name::$TF_STATE_BLOB_CONTAINER_NAME"
          echo "::set-output name=key::$TF_STATE_BLOB_FILE"
          echo "::set-output name=tf_actions_version::$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name' | sed 's/^v//')"
        id: azurerm
      - name: "Terraform Format"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "fmt"
          tf_actions_working_dir: ${{github.workspace}}
      - name: "Terraform Init"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "init"
          tf_actions_working_dir: ${{github.workspace}}
          args: |
            -backend-config="sas_token=${{ steps.azurerm.outputs.sas_token }}"
            -backend-config="resource_group_name=${{ steps.azurerm.outputs.resource_group_name }}"
            -backend-config="storage_account_name=${{ steps.azurerm.outputs.storage_account_name  }}"
            -backend-config="container_name=${{ steps.azurerm.outputs.container_name }}"
            -backend-config="key=${{ steps.azurerm.outputs.key }}"
      - name: "Terraform Validate"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: ${{github.workspace}}
      - name: "Terraform Plan [apply|"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: ${{github.workspace}}
          args: "-input=false -out ${{github.run_id}}.apply.tfplan"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{github.run_id}}.apply.tfplan
          path: ${{github.workspace}}/${{github.run_id}}.apply.tfplan

  tf_apply:
    name: "Terraform [apply]"
    # if: github.event.pull_request.merged
    needs: [azurerm, tf_plan]
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v1
      - name: "Set environment variables and get the SAS Token"
        shell: "/bin/bash {0}"
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID
          source ${{github.workspace}}/variables.sh
          echo "::set-output name=sas_token::$(az storage account generate-sas \
            --permissions cdlruwap \
            --account-name $TF_STATE_BLOB_ACCOUNT_NAME \
            --services b \
            --resource-types sco \
            --expiry `date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'` \
            --only-show-errors -o tsv)"
          echo "::set-output name=resource_group::$TF_STATE_BLOB_ACCOUNT_RESOURCE_GROUP"
          echo "::set-output name=storage_account_name::$TF_STATE_BLOB_ACCOUNT_NAME"
          echo "::set-output name=container_name::$TF_STATE_BLOB_CONTAINER_NAME"
          echo "::set-output name=key::$TF_STATE_BLOB_FILE"
          echo "::set-output name=tf_actions_version::$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name' | sed 's/^v//')"
        id: azurerm
      - uses: actions/download-artifact@v3
        with:
          name: ${{github.run_id}}.apply.tfplan
      - name: "Terraform Init"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "init"
          tf_actions_working_dir: ${{github.workspace}}
          args: |
            -backend-config="sas_token=${{ steps.azurerm.outputs.sas_token }}"
            -backend-config="resource_group_name=${{ steps.azurerm.outputs.resource_group_name }}"
            -backend-config="storage_account_name=${{ steps.azurerm.outputs.storage_account_name  }}"
            -backend-config="container_name=${{ steps.azurerm.outputs.container_name }}"
            -backend-config="key=${{ steps.azurerm.outputs.key }}"
      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ steps.azurerm.outputs.tf_actions_version }}
          tf_actions_subcommand: "apply"
          tf_actions_working_dir: ${{github.workspace}}
          args: "-input=false -auto-approve ${{github.run_id}}.apply.tfplan"